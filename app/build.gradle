/*
 * Copyright (c) 2017. Manuel Rebollo BÃ¡ez.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

def STRING = "String"
def BOOLEAN = "boolean"

android {
    compileSdkVersion build_versions.target_sdk
    buildToolsVersion build_versions.build_tools

    defaultConfig {
        applicationId "com.mrb.loteriadenavidad"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode computeVersionCode()
        versionName "4.3"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField STRING, "API_URL", '"http://api.elpais.com/ws"'
    }

    buildTypes {
        debug {
            applicationIdSuffix '.develop'
            buildConfigField STRING, "GIT_SHA", "\"DEBUG\""
            buildConfigField STRING, "BUILD_TIME", "\"DEBUG\""
            buildConfigField BOOLEAN, "RETROFIT_LOG", "true"
            debuggable true
            minifyEnabled false
            testCoverageEnabled true
        }

        release {
            def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
            def buildTime = new GregorianCalendar().format("MM-dd-yyyy' 'h:mm:ss a z")
            buildConfigField STRING, "GIT_SHA", "\"${gitSha}\""
            buildConfigField STRING, "BUILD_TIME", "\"${buildTime}\""
            buildConfigField BOOLEAN, "RETROFIT_LOG", "false"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
    }
}

dependencies {
    // Support libraries
    implementation deps.support.app_compat
    implementation deps.support.v4
    implementation deps.support.design

    // Architecture components
    implementation deps.lifecycle.runtime
    implementation deps.lifecycle.extensions
    kapt deps.lifecycle.compiler
    implementation deps.room.runtime
    kapt deps.room.compiler
    implementation deps.room.rxjava2

    // RxJava
    implementation deps.rx_android
    implementation deps.rxjava2

    // kotlin
    // Kotlin
    implementation deps.kotlin.stdlib

    // Dependencies for local unit tests
    testImplementation deps.junit
    testImplementation deps.mockito.all
    testImplementation deps.hamcrest
    testImplementation deps.arch_core.testing
    testImplementation deps.kotlin.stdlib
    testImplementation deps.kotlin.test

    // Android Testing Support Library's runner and rules
    androidTestCompile deps.atsl.runner
    androidTestCompile deps.atsl.rules
    androidTestCompile deps.room.testing
    androidTestCompile deps.arch_core.testing

    // Dependencies for Android unit tests
    androidTestCompile deps.junit
    androidTestCompile deps.mockito.core, { exclude group: 'net.bytebuddy' }
    androidTestCompile deps.dexmaker

    // Espresso UI Testing
    androidTestCompile deps.espresso.core
    androidTestCompile deps.espresso.contrib
    androidTestCompile deps.espresso.intents

    // Resolve conflicts between main and test APK:
    androidTestCompile deps.support.annotations
    androidTestCompile deps.support.v4
    androidTestCompile deps.support.app_compat
    androidTestCompile deps.support.design
}

/**
 * Gets the commit number from the current Git commit. E.g. 538
 */
def computeVersionCode() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-list', '--count', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim().toInteger()
}